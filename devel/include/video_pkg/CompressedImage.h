// Generated by gencpp from file video_pkg/CompressedImage.msg
// DO NOT EDIT!


#ifndef VIDEO_PKG_MESSAGE_COMPRESSEDIMAGE_H
#define VIDEO_PKG_MESSAGE_COMPRESSEDIMAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace video_pkg
{
template <class ContainerAllocator>
struct CompressedImage_
{
  typedef CompressedImage_<ContainerAllocator> Type;

  CompressedImage_()
    : data()
    , width(0)
    , height(0)
    , format()  {
    }
  CompressedImage_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , width(0)
    , height(0)
    , format(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _data_type;
  _data_type data;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _format_type;
  _format_type format;





  typedef boost::shared_ptr< ::video_pkg::CompressedImage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::video_pkg::CompressedImage_<ContainerAllocator> const> ConstPtr;

}; // struct CompressedImage_

typedef ::video_pkg::CompressedImage_<std::allocator<void> > CompressedImage;

typedef boost::shared_ptr< ::video_pkg::CompressedImage > CompressedImagePtr;
typedef boost::shared_ptr< ::video_pkg::CompressedImage const> CompressedImageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::video_pkg::CompressedImage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::video_pkg::CompressedImage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::video_pkg::CompressedImage_<ContainerAllocator1> & lhs, const ::video_pkg::CompressedImage_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.format == rhs.format;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::video_pkg::CompressedImage_<ContainerAllocator1> & lhs, const ::video_pkg::CompressedImage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace video_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::video_pkg::CompressedImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::video_pkg::CompressedImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::video_pkg::CompressedImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::video_pkg::CompressedImage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::video_pkg::CompressedImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::video_pkg::CompressedImage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::video_pkg::CompressedImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30dde7683502af43aca6cf366dc86787";
  }

  static const char* value(const ::video_pkg::CompressedImage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30dde7683502af43ULL;
  static const uint64_t static_value2 = 0xaca6cf366dc86787ULL;
};

template<class ContainerAllocator>
struct DataType< ::video_pkg::CompressedImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "video_pkg/CompressedImage";
  }

  static const char* value(const ::video_pkg::CompressedImage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::video_pkg::CompressedImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] data\n"
"uint32 width\n"
"uint32 height\n"
"string format\n"
;
  }

  static const char* value(const ::video_pkg::CompressedImage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::video_pkg::CompressedImage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.format);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CompressedImage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::video_pkg::CompressedImage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::video_pkg::CompressedImage_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "format: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.format);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VIDEO_PKG_MESSAGE_COMPRESSEDIMAGE_H
